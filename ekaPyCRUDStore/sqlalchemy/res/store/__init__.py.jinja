r"""
Python CRUD store.
"""
from sqlalchemy import create_engine, Column, Unicode, Integer, Float, Boolean, ForeignKey
from sqlalchemy.ext.declarative import declarative_base
from sqlalchemy.orm import relationship, sessionmaker

# Data
Base = declarative_base()

# State
Resources = {}

# Resources
{% for resName, Resource in props.iteritems() if Resource['persist'] -%}
class {{ resName }}(Base):
  __tablename__ = '{{ resName }}'
  id = Column(Integer, primary_key=True)
  {% for fieldName, Field in Resource['props'].iteritems() if Field['persist'] -%}
  {{ fieldName }} = Column({{ Field['crud.store.type'] }})
  {% endfor %}

Resources['{{resName}}'] = {{ resName }}
{% endfor %}

# Exports
def getStores():
  engine = create_engine('{{ builder['store']['engine'] }}')
  session = sessionmaker()
  session.configure(bind=engine)
  Base.metadata.create_all(engine)
  s = session()
  import atexit
  atexit.register(lambda: s.close())

  class Store:
    def __init__(self, model):
      self._model = model

    def read(self, id):
      model = self._model
      Resource = s.query(model).filter(model.id == id).one()
      return {column.name: getattr(Resource, column.name) for column in Resource.__table__.columns}

    def create(self, Data):
      Resource = self._model(**Data)
      s.add(Resource)
      s.commit()

      return {'id': getattr(Resource, 'id')}

    def update(self, Data):
      model = self._model
      Resource = s.query(model).filter(model.id == Data['id'])
      Resource.update(Data)
      s.commit()

      return ''

    def delete(self, id):
      model = self._model
      s.query(model).filter(model.id == id).delete()
      s.commit()

  return {k: Store(v) for k, v in Resources.iteritems()}
